%% Name: Mohammad Hatem Mohamamad Saeed
%% Project 1: MATLAB Basics

classdef RobotArmSimulation < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure          matlab.ui.Figure
        L2EditField       matlab.ui.control.NumericEditField
        L2EditFieldLabel  matlab.ui.control.Label
        L1EditField       matlab.ui.control.NumericEditField
        L1EditFieldLabel  matlab.ui.control.Label
        PauseButton       matlab.ui.control.StateButton
        SimulationButton  matlab.ui.control.Button
        UIAxes            matlab.ui.control.UIAxes
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: SimulationButton
        function SimulationButtonPushed(app, event)
          %% Main Givens and mathematical model 
            
            hold(app.UIAxes,'off')          %To clear the plot in the previous step

            %app.UIAxes is a handle to the graphical axes object created in your App Designer interface.
            % It allows you to interact with and control the plots and visualizations inside your app.

            l1 = app.L1EditField.Value;     %Length of arm 1
            l2=  app.L2EditField.Value;     %Length of arm 2


            %Importing Data of theta from excel file
            %*** The file must be in the same path of the .m file
            data = readmatrix('robot_arm_angles.csv'); 

            % Each theta vector thake its values from specific column
            theta1 = data(:,2)';
            theta2 = data(:,3)';

            % For forward kinematics 
            % theta1 = linspace(0,90,100);    %theta1 vector
            % theta2 = linspace(0,180,100);   %theta2 vector

            %coordinates of the first joint
            x1 = l1*cosd(theta1);  %cosd: theta in degrees
            y1 = l1*sind(theta1);  %sind: theta in degrees

            %coordinates of the end effector
            x2 = l2*cosd(theta1 + theta2)+x1;
            y2 = l2*sind(theta1 + theta2)+y1;

            %% Initialization of drawing
          
            p1 = plot(app.UIAxes,[0,x1(1)],[0,y1(1)]);
            hold(app.UIAxes,'on')       %to keep drawing poth 2 arms in the same plot
            p2 = plot(app.UIAxes,[x1(1),x2(1)], [y1(1),y2(1)]);


            %Control the change in x,y axes
            n=1.5;

            if l1>l2
                xlim(app.UIAxes,[-n*l1, n*l1]);
                ylim(app.UIAxes,[-n*l1,n*l1]);

            else
                xlim(app.UIAxes,[-n*l2, n*l2]);
                ylim(app.UIAxes,[-n*l2,n*l2]);
            end


            %plotting the trajectory generated by the (End effector)
            plot(app.UIAxes,x2,y2)

            
            %% Simulation

            %main program loop (Repeating the drawing)
            while true  

                %looping on each element in theta vectors
                %length of theta1 = length of theta2
                for i = 1:2:length(theta1)

                    %deleting the privious step
                    delete(p1);
                    delete(p2);

                    %plotting the current step
                    p1 = plot(app.UIAxes,[0,x1(i)],[0,y1(i)],'r');
                    p2 = plot(app.UIAxes,[x1(i),x2(i)], [y1(i),y2(i)],'b');


                    drawnow     %update plot

                    %Check if pause button pressed or not

                    %If it pressed
                    if app.PauseButton.Value == 1

                     %Dummy loop, just draw the current plot on the screen
                        while app.PauseButton.Value == 1
                            drawnow;  %force update on screen
                        end

                    else
                        pause(0.01) %delay between each step
                    end

                end  %End of plotting for loop

            end %End of while ture


        end

        % Value changed function: PauseButton
        function PauseButtonValueChanged(app, event)
            value = app.PauseButton.Value;

        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.4667 0.6745 0.1882];
            app.UIFigure.Position = [100 100 640 480];
            app.UIFigure.Name = 'MATLAB App';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Robot Arm Simulation')
            xlabel(app.UIAxes, 'X - Axis')
            ylabel(app.UIAxes, 'Y - Axis')
            zlabel(app.UIAxes, 'Z')
            app.UIAxes.FontSize = 14;
            app.UIAxes.Position = [27 119 567 348];

            % Create SimulationButton
            app.SimulationButton = uibutton(app.UIFigure, 'push');
            app.SimulationButton.ButtonPushedFcn = createCallbackFcn(app, @SimulationButtonPushed, true);
            app.SimulationButton.FontSize = 18;
            app.SimulationButton.FontWeight = 'bold';
            app.SimulationButton.FontColor = [0 0.4471 0.7412];
            app.SimulationButton.Position = [257 45 140 46];
            app.SimulationButton.Text = 'Simulation';

            % Create PauseButton
            app.PauseButton = uibutton(app.UIFigure, 'state');
            app.PauseButton.ValueChangedFcn = createCallbackFcn(app, @PauseButtonValueChanged, true);
            app.PauseButton.Text = 'Pause';
            app.PauseButton.FontSize = 18;
            app.PauseButton.FontWeight = 'bold';
            app.PauseButton.FontColor = [0.851 0.3255 0.098];
            app.PauseButton.Position = [58 45 138 46];

            % Create L1EditFieldLabel
            app.L1EditFieldLabel = uilabel(app.UIFigure);
            app.L1EditFieldLabel.HorizontalAlignment = 'right';
            app.L1EditFieldLabel.FontSize = 14;
            app.L1EditFieldLabel.FontWeight = 'bold';
            app.L1EditFieldLabel.Position = [479 80 25 22];
            app.L1EditFieldLabel.Text = 'L1';

            % Create L1EditField
            app.L1EditField = uieditfield(app.UIFigure, 'numeric');
            app.L1EditField.Limits = [0.1 5];
            app.L1EditField.FontSize = 14;
            app.L1EditField.FontWeight = 'bold';
            app.L1EditField.Position = [519 80 75 22];
            app.L1EditField.Value = 5;

            % Create L2EditFieldLabel
            app.L2EditFieldLabel = uilabel(app.UIFigure);
            app.L2EditFieldLabel.HorizontalAlignment = 'right';
            app.L2EditFieldLabel.FontSize = 14;
            app.L2EditFieldLabel.FontWeight = 'bold';
            app.L2EditFieldLabel.Position = [479 32 25 22];
            app.L2EditFieldLabel.Text = 'L2';

            % Create L2EditField
            app.L2EditField = uieditfield(app.UIFigure, 'numeric');
            app.L2EditField.Limits = [0.1 5];
            app.L2EditField.FontSize = 14;
            app.L2EditField.FontWeight = 'bold';
            app.L2EditField.Position = [519 32 77 22];
            app.L2EditField.Value = 3;

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = RobotArmSimulation

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end